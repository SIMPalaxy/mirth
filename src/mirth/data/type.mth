
module(mirth.data.type)
import(mirth.data.name)
import(data.map)

# mirth/data/type
data Type
    TYPE_ERROR
    TYPE_DONT_CARE
    TPrim -> PrimType
    TMeta -> MetaVar
    THole -> Name
    TVar -> Var
    TTable -> Table
    TData -> Data
    TTensor -> Type Type
    TMorphism -> Type Type
    TApp -> Type Type
    TValue -> Value
end

data Value
    VALUE_INT -> Int
    VALUE_STR -> Str
    VALUE_BLOCK -> Block
end

data PrimType
    PRIM_TYPE_UNIT
    PRIM_TYPE_TYPE
    PRIM_TYPE_STACK
    PRIM_TYPE_EFFECT
    PRIM_TYPE_INT
    PRIM_TYPE_PTR
    PRIM_TYPE_STR
    PRIM_TYPE_CHAR
    PRIM_TYPE_BOOL
    PRIM_TYPE_U64
    PRIM_TYPE_U32
    PRIM_TYPE_U16
    PRIM_TYPE_U8
    PRIM_TYPE_I64
    PRIM_TYPE_I32
    PRIM_TYPE_I16
    PRIM_TYPE_I8
end

table(MetaVar)
table(Data)
table(Tag)
data(Ctx, CTX -> List(Var))

field(meta-is-defined, MetaVar, Bool)
field(meta-type-raw, MetaVar, Type)
field(meta-name, MetaVar, Name)
field(meta-modality, MetaVar, Maybe(Modality))

field(data-header, Data, Token)
field(data-name, Data, Name)
field(data-arity, Data, Int)
field(data-tags, Data, List(Tag))

field(tag-data, Tag, Data)
field(tag-name, Tag, Name)
field(tag-value, Tag, Int)
field(tag-sig, Tag, Token)
field(tag-has-sig, Tag, Bool)
field(tag-sig-is-checked, Tag, Bool)
field(tag-ctx, Tag, Ctx)
field(tag-type-raw, Tag, Type)


def(def-type!, Type Str --, name-new! name-type!)

def(init-types!, --,

    ##################
    # ABSTRACT TYPES #
    ##################

    TYPE_INT "Int" def-type!
    TYPE_PTR "Ptr" def-type!
    TYPE_STR "Str" def-type!
    TYPE_CHAR "Char" def-type!
    TYPE_BOOL "Bool" def-type!

    ##################
    # CONCRETE TYPES #
    ##################

    # TYPE_U0 "U0" def-type!            # TODO
    # TYPE_U1 "U1" def-type!            # TODO
    # TYPE_U2 "U2" def-type!            # TODO
    # TYPE_U3 "U3" def-type!            # TODO
    # TYPE_U4 "U4" def-type!            # TODO
    # TYPE_U5 "U5" def-type!            # TODO
    # TYPE_U6 "U6" def-type!            # TODO
    # TYPE_U7 "U7" def-type!            # TODO
    TYPE_U8 "U8" def-type!
    TYPE_U16 "U16" def-type!
    TYPE_U32 "U32" def-type!
    TYPE_U64 "U64" def-type!
    # TYPE_U128 "U128" def-type!        # TODO?
    # TYPE_U256 "U256" def-type!        # TODO?
    # TYPE_U512 "U512" def-type!        # TODO?

    # TYPE_I1 "I1" def-type!            # TODO?
    # TYPE_I2 "I2" def-type!            # TODO?
    # TYPE_I3 "I3" def-type!            # TODO?
    # TYPE_I4 "I4" def-type!            # TODO?
    # TYPE_I5 "I5" def-type!            # TODO?
    # TYPE_I6 "I6" def-type!            # TODO?
    # TYPE_I7 "I7" def-type!            # TODO?
    TYPE_I8 "I8" def-type!
    TYPE_I16 "I16" def-type!
    TYPE_I32 "I32" def-type!
    TYPE_I64 "I64" def-type!
    # TYPE_I128 "U128" def-type!        # TODO?
    # TYPE_I256 "U256" def-type!        # TODO?
    # TYPE_I512 "U512" def-type!        # TODO?

    # TYPE_F32 "F32" def-type!          # TODO.
    # TYPE_F64 "F64" def-type!          # TODO.
    # TYPE_F80 "F80" def-type!          # TODO?
    # TYPE_F128 "F128" def-type!        # TODO?

    # TYPE_M64 "M64" def-type!          # TODO
    # TYPE_M128 "M128" def-type!        # TODO
    # TYPE_M256 "M256" def-type!        # TODO
    # TYPE_M512 "M512" def-type!        # TODO

    #################
    # BINDING TYPES #
    #################

    # Names & representations based on the System V ABI for AMD64
    # These representations aren't portable to x86 or other architectures.
    # TODO: Make these types primitive & make them portable.

    TYPE_BOOL "C-bool" def-type!
    TYPE_I8 "C-char" def-type!
    TYPE_I8 "C-signed-char" def-type!
    TYPE_U8 "C-unsigned-char" def-type!
    TYPE_I16 "C-short" def-type!
    TYPE_I16 "C-signed-short" def-type!
    TYPE_U16 "C-unsigned-short" def-type!
    TYPE_I32 "C-int" def-type!
    TYPE_I32 "C-signed-int" def-type!
    TYPE_I32 "C-enum" def-type!
    TYPE_U32 "C-unsigned-int" def-type!
    TYPE_I64 "C-long" def-type!
    TYPE_I64 "C-signed-long" def-type!
    TYPE_I64 "C-long-long" def-type!
    TYPE_I64 "C-signed-long-long" def-type!
    TYPE_U64 "C-unsigned-long" def-type!
    TYPE_U64 "C-unsigned-long-long" def-type!
    # TYPE_I128 "C-int128" def-type!            # TODO?
    # TYPE_I128 "C-signed-int128" def-type!     # TODO?
    #
    TYPE_PTR "C-void*" def-type!
    TYPE_PTR "C-char*" def-type!
    TYPE_PTR "C-const-void*" def-type!
    TYPE_PTR "C-const-char*" def-type!


    )

#########
# Types #
#########

def(T*, Type Type -- Type, TTensor)
def(T->, Type Type -- Type, TMorphism)

def(T0, Type, TYPE_UNIT)
def(T1, Type -- Type, dip(T0) T*)
def(T2, Type Type -- Type, dip(T1) T*)
def(T3, Type Type Type -- Type, dip(T2) T*)
def(T4, Type Type Type Type -- Type, dip(T3) T*)
def(T5, Type Type Type Type Type -- Type, dip(T4) T*)
def(T6, Type Type Type Type Type Type -- Type, dip(T5) T*)

# def(type-is-error, Type -- Bool, match(TYPE_ERROR -> true, _ -> drop false))
# def(type-is-dont-care, Type -- Bool, match(TYPE_DONT_CARE -> true, _ -> drop false))
# def(type-is-prim, Type -- Bool, match(TPrim -> drop true, _ -> drop false))
# def(type-is-var, Type -- Bool, match(TVar -> drop true, _ -> drop false))
# def(type-is-meta, Type -- Bool, match(TMeta -> drop true, _ -> drop false))
# def(type-is-tensor, Type -- Bool, match(TTensor -> drop2 true, _ -> drop false))
def(type-is-morphism, Type -- Bool, match(TMorphism -> drop2 true, _ -> drop false))
# def(type-is-table, Type -- Bool, match(TTable -> drop true, _ -> drop false))
# def(type-is-hole, Type -- Bool, match(THole -> drop true, _ -> drop false))
# def(type-is-app, Type -- Bool, match(TApp -> drop2 true, _ -> drop false))
# def(type-is-data, Type -- Bool, match(TData -> drop true, _ -> drop false))

# def(type-is-error?, Type -- Type Bool, dup type-is-error)
# def(type-is-dont-care?, Type -- Type Bool, dup type-is-dont-care)
# def(type-is-prim?, Type -- Type Bool, dup type-is-prim)
# def(type-is-var?, Type -- Type Bool, dup type-is-var)
# def(type-is-meta?, Type -- Type Bool, dup type-is-meta)
# def(type-is-tensor?, Type -- Type Bool, dup type-is-tensor)
def(type-is-morphism?, Type -- Type Bool, dup type-is-morphism)
# def(type-is-table?, Type -- Type Bool, dup type-is-table)
# def(type-is-hole?, Type -- Type Bool, dup type-is-hole)
# def(type-is-app?, Type -- Type Bool, dup type-is-app)
# def(type-is-data?, Type -- Type Bool, dup type-is-data)

def(TYPE_TYPE, Type, PRIM_TYPE_TYPE TPrim) # type of types
def(TYPE_STACK, Type, PRIM_TYPE_STACK TPrim) # type of stack types
def(TYPE_EFFECT, Type, PRIM_TYPE_EFFECT TPrim) # type of effect types
def(TYPE_UNIT, Type, PRIM_TYPE_UNIT TPrim) # unit type
def(TYPE_BOOL, Type, PRIM_TYPE_BOOL TPrim) # bool type
def(TYPE_INT, Type, PRIM_TYPE_INT TPrim) # generic integer type for integer literals
def(TYPE_PTR, Type, PRIM_TYPE_PTR TPrim) # generic pointer type (e.g. void*)
def(TYPE_STR, Type, PRIM_TYPE_STR TPrim) # string pointer (just a pointer but nominally)
def(TYPE_CHAR, Type, PRIM_TYPE_CHAR TPrim) # char pointer (valid unicode codepoint)
def(TYPE_U8, Type, PRIM_TYPE_U8 TPrim) # fixed width integer type -- unsigned 8 bit
def(TYPE_U16, Type, PRIM_TYPE_U16 TPrim) # fixed width integer type -- unsigned 16 bit
def(TYPE_U32, Type, PRIM_TYPE_U32 TPrim) # fixed width integer type -- unsigned 32 bit
def(TYPE_U64, Type, PRIM_TYPE_U64 TPrim) # fixed width integer type -- unsigned 64 bit
def(TYPE_I8, Type, PRIM_TYPE_I8 TPrim) # fixed width integer type -- signed 8 bit
def(TYPE_I16, Type, PRIM_TYPE_I16 TPrim) # fixed width integer type -- signed 16 bit
def(TYPE_I32, Type, PRIM_TYPE_I32 TPrim) # fixed width integer type -- signed 32 bit
def(TYPE_I64, Type, PRIM_TYPE_I64 TPrim) # fixed width integer type -- signed 64 bit

def(type-expand, Type -- Type,
    match(
        TMeta -> meta-expand,
        # TODO: expand/compute app type if this is reasonable
        _ -> id
    ))

data Gamma
    GAMMA -> Token
end

gamma-token@ : Gamma -- Token
gamma-token@ = match(GAMMA -> id)

gamma-token? : Gamma -- Gamma Token
gamma-token? = dup gamma-token@

# Raise a type unification error.
def(type-unify-failed!, Gamma Type Type -- Gamma Type +Elab,
    dip2(gamma-token? token-location location-trace!)
    ": error: Failed to unify " str-trace!
    dip(type-trace!)
    " with " str-trace!
    type-trace!
    trace-ln!
    TYPE_ERROR
    num-errors++)

def(type-can-have-modality, Modality Type -- Bool,
    nil rotr type-can-have-modality-aux)

def(type-can-have-modality-aux, List(Type) Modality Type -- Bool,
    match(
        TYPE_ERROR -> drop2 true,
        TYPE_DONT_CARE -> drop2 true,
        THole -> drop3 true,
        TMeta -> meta-can-have-modality-aux,
        TVar -> var-can-have-modality-aux,
        TPrim -> prim-type-can-have-modality-aux,
        TData -> data-can-have-modality-aux,
        TTensor ->
            dip(over) type-can-have-modality if(
                type-can-have-modality-aux,
                drop3 false
            ),
        TApp -> rotr dip2(snoc) type-can-have-modality-aux,
        TMorphism -> drop2 nip MOD_WHY !=,
        TValue -> value-can-have-modality-aux,
        TTable -> drop3 true,
    ))

def(meta-can-have-modality-aux, List(Type) Modality MetaVar -- Bool,
    meta-is-defined? if(
        meta-expand type-can-have-modality-aux,
        meta-modality@ match(
            NONE -> drop2 true,
            SOME -> == nip
        )
    ))

def(var-can-have-modality-aux, List(Type) Modality Var -- Bool,
    dip(SOME) var-modality@ == nip)

def(value-can-have-modality-aux, List(Type) Modality Value -- Bool,
    match(
        VALUE_STR -> drop3 true,
        VALUE_INT -> drop MOD_BANG == nip,
        VALUE_BLOCK -> drop MOD_BANG == nip,
    ))

def(data-can-have-modality-aux, List(Type) Modality Data -- Bool,
    swap match(
        MOD_BANG -> data-can-have-!-modality,
        MOD_WHY -> data-can-have-?-modality
    ))


||| Safe approximation: Only data for which all type args
||| and all types in constructor can have the ! modality,
||| can have the ! modality. This fails some things like
||| morphism types, but that sounds like a good thing. It
||| also fails things like phantom type params, but that
||| sounds kinda reasonable... We'll see I guess.
def(data-can-have-!-modality, List(Type) Data -- Bool,
    data-tags-can-have-!-modality if(
        all(MOD_BANG over type-can-have-modality),
        drop false
    ))

field(data-tags-can-have-!-modality-cached, Data, Maybe(Bool))
def(data-tags-can-have-!-modality, Data -- Bool,
    data-tags-can-have-!-modality-cached? match(
        SOME -> dip(drop),
        NONE ->
            true SOME over data-tags-can-have-!-modality-cached!
            data-tags? all(
                MOD_BANG over
                tag-type-raw@
                    # TODO: use elab-type-sig after we fix field(...)
                    # to not be eager in the types ... for now this
                    # will cause gross over-approximations
                type-can-have-modality
            )
            tuck SOME swap data-tags-can-have-!-modality-cached!
    ))

||| Safe approximation: Only data that has an empty
||| first constructor can have the ? modality. This
||| includes Maybe and List but not currently Bag,
||| which is harsh but fair.
def(data-can-have-?-modality, List(Type) Data -- Bool,
    nip data-tags@ first match(
        NONE -> false,
        SOME -> tag-num-inputs? 0 == nip
    ))

def(prim-type-can-have-modality-aux, List(Type) Modality PrimType -- Bool,
    drop3 true)

# Unify two types. Raises an elaboration error if unification is impossible.
def(type-unify!, Gamma Type Type -- Gamma Type +Elab,
    swap type-expand match(
        TYPE_ERROR -> drop TYPE_ERROR,
        TYPE_DONT_CARE -> id,
        THole -> type-hole-unify!,
        TMeta ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TMeta,
                THole -> dip(TMeta) type-hole-unify!,
                _ -> swap meta-unify!,
            ),
        TVar ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TVar,
                THole -> dip(TVar) type-hole-unify!,
                TMeta -> dip(TVar) meta-unify!,
                TVar -> type-var-unify!,
                _ -> dip(TVar) type-unify-failed!,
            ),
        TPrim ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TPrim,
                THole -> dip(TPrim) type-hole-unify!,
                TMeta -> dip(TPrim) meta-unify!,
                TValue -> dip(TPrim) type-value-unify!,
                TPrim -> type-prim-unify!,
                _ -> dip(TPrim) type-unify-failed!,
            ),
        TData ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TData,
                THole -> dip(TData) type-hole-unify!,
                TMeta -> dip(TData) meta-unify!,
                TValue -> dip(TData) type-value-unify!,
                TData -> type-data-unify!,
                _ -> dip(TData) type-unify-failed!,
            ),
        TTable ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TTable,
                THole -> dip(TTable) type-hole-unify!,
                TMeta -> dip(TTable) meta-unify!,
                TValue -> dip(TTable) type-value-unify!,
                TTable -> type-table-unify!,
                _ -> dip(TTable) type-unify-failed!,
            ),
        TTensor ->
            rotl type-expand match(
                TYPE_ERROR -> drop2 TYPE_ERROR,
                TYPE_DONT_CARE -> TTensor,
                THole -> dip(TTensor) type-hole-unify!,
                TMeta -> dip(TTensor) meta-unify!,
                TValue -> dip(TTensor) type-value-unify!,
                TTensor -> type-unify-pair! TTensor,
                _ -> dip(TTensor) type-unify-failed!,
            ),
        TMorphism ->
            rotl type-expand match(
                TYPE_ERROR -> drop2 TYPE_ERROR,
                TYPE_DONT_CARE -> TMorphism,
                THole -> dip(TMorphism) type-hole-unify!,
                TMeta -> dip(TMorphism) meta-unify!,
                TValue -> dip(TMorphism) type-value-unify!,
                TMorphism -> type-unify-pair! TMorphism,
                _ -> dip(TMorphism) type-unify-failed!,
            ),
        TApp ->
            rotl type-expand match(
                TYPE_ERROR -> drop2 TYPE_ERROR,
                TYPE_DONT_CARE -> TApp,
                THole -> dip(TApp) type-hole-unify!,
                TMeta -> dip(TApp) meta-unify!,
                TValue -> dip(TApp) type-value-unify!,
                TApp -> type-unify-pair! TApp,
                _ -> dip(TApp) type-unify-failed!,
            ),
        TValue ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TValue,
                THole -> dip(TValue) type-hole-unify!,
                TMeta -> dip(TValue) meta-unify!, # this might be bad?
                TValue -> value-unify!,
                _ -> value-type-unify!
            ),
    ))

value-unify! : Gamma Value Value -- Gamma Type
value-unify! =
    swap match(
        VALUE_INT -> swap match(
            VALUE_INT -> dup2 == if(drop VALUE_INT TValue, drop2 TYPE_INT),
            VALUE_STR ->
                drop2 gamma-token?
                "Can't unify int value with string value."
                emit-error! TYPE_ERROR,
            VALUE_BLOCK ->
                drop2 gamma-token?
                "Can't unify int value with block."
                emit-error! TYPE_ERROR,
        ),

        VALUE_STR -> swap match(
            VALUE_STR -> dup2 == if(drop VALUE_STR TValue, drop2 TYPE_STR),
            VALUE_INT ->
                drop2 gamma-token?
                "Can't unify string value with int value."
                emit-error! TYPE_ERROR,
            VALUE_BLOCK ->
                drop2 gamma-token?
                "Can't unify string value with block."
                emit-error! TYPE_ERROR,
        ),

        VALUE_BLOCK -> swap match(
            VALUE_BLOCK ->
                dup2 == if(
                    drop VALUE_BLOCK TValue,
                    block-infer-type!
                    block-unify-type!
                ),
            VALUE_INT ->
                drop2 gamma-token?
                "Can't unify block with int value."
                emit-error! TYPE_ERROR,
            VALUE_STR ->
                drop2 gamma-token?
                "Can't unify block with string value."
                emit-error! TYPE_ERROR
        ),
    )

type-value-unify! : Gamma Type Value -- Gamma Type,
type-value-unify! =
    match(
        VALUE_INT -> drop TYPE_INT type-unify!,
        VALUE_STR -> drop TYPE_STR type-unify!,
        VALUE_BLOCK -> swap block-unify-type!, # technically inaccurate?
    )

value-type-unify! : Gamma Value Type -- Gamma Type
value-type-unify! =
    swap match(
        VALUE_INT -> drop TYPE_INT swap type-unify!,
        VALUE_STR -> drop TYPE_STR swap type-unify!,
        VALUE_BLOCK -> swap block-unify-type!,
    )

arrow-type : Arrow -- Type
arrow-type = arrow-dom? swap arrow-cod@ TMorphism
    # TODO effects

block-infer-type! : Block -- Type
block-infer-type! = block-arrow@ arrow-type

def(type-unify-pair!, Gamma Type Type Type Type -- Gamma Type Type,
    dip(swap dip(type-unify! swap)) type-unify! dip(swap))

def(type-prim-unify!, Gamma PrimType PrimType -- Gamma Type,
    dup2 == if(
        drop TPrim,
        dip(TPrim) TPrim type-unify-failed!
    ))
def(type-data-unify!, Gamma Data Data -- Gamma Type,
    dup2 == if(
        drop TData,
        dip(TData) TData type-unify-failed!
    ))
def(type-table-unify!, Gamma Table Table -- Gamma Type,
    dup2 == if(
        drop TTable,
        dip(TTable) TTable type-unify-failed!
    ))
def(type-var-unify!, Gamma Var Var -- Gamma Type,
    dup2 == if(
        drop TVar,
        dip(TVar) TVar type-unify-failed!
    ))

def(type-has-meta?, MetaVar Type -- MetaVar Type Bool,
    dup2 type-has-meta)

def(type-has-meta, MetaVar Type -- Bool,
    type-expand match(
        TYPE_ERROR -> drop false,
        TYPE_DONT_CARE -> drop false,
        TPrim -> drop2 false,
        TVar -> drop2 false,
        THole -> drop2 false,
        TMeta -> ==,
        TTensor -> dip(type-has-meta? nip) swap if(drop2 true, type-has-meta),
        TMorphism -> dip(type-has-meta? nip) swap if(drop2 true, type-has-meta),
        TApp -> dip(type-has-meta? nip) swap if(drop2 true, type-has-meta),
        TData -> drop2 false,
        TTable -> drop2 false,
        TValue -> match(
            VALUE_INT -> drop2 false,
            VALUE_STR -> drop2 false,
            VALUE_BLOCK -> block-infer-type! type-has-meta
                # TODO: handle deferred blocks
        )
    ))

def(type-trace-sig!, Type -- +IO,
    type-expand match(
        TYPE_ERROR -> "<ERROR>" str-trace!,
        TMorphism ->
            swap
            type-trace-stack-dom!
            "--" str-trace!
            type-trace-stack-cod!,
        _ -> type-trace-stack!
    ))

def(type-trace-stack-dom!, Type -- +IO,
    type-expand dup TYPE_UNIT == if(
        drop,
        type-trace-stack!
        " " str-trace!
    ))

def(type-trace-stack-cod!, Type -- +IO,
    type-expand dup TYPE_UNIT == if(
        drop,
        " " str-trace!
        type-trace-stack!
    ))

def(type-trace-stack!, Type -- +IO,
    type-expand match(
        TTensor ->
            swap type-trace-stack-dom! type-trace!,
        TVar ->
            var-name@
            dup name-trace!
            name-could-be-stack-var
            if(id, " ." str-trace!),
        _ ->
            type-trace!
    ))

def(type-trace!, Type -- +IO,
    type-expand match(
        TYPE_ERROR -> "<ERROR>" str-trace!,
        TYPE_DONT_CARE -> "_" str-trace!,
        TPrim -> type-trace-prim!,
        TVar -> var-name@ name-trace!,
        TMeta -> meta-trace!,
        TTensor -> "[" str-trace! TTensor type-trace-stack! "]" str-trace!,
        TMorphism -> "[" str-trace! TMorphism type-trace-sig! "]" str-trace!,
        TData -> data-name@ name-trace!,
        TTable -> table-name@ name-trace!,
        THole -> name-trace!,
        TApp -> app-type-trace!,
        TValue -> value-trace!
    ))

def(meta-trace!, MetaVar -- +IO,
    meta-name? is-nil? if(
        drop meta-modality? match(
            NONE -> "%" str-trace!,
            SOME -> match(
                MOD_BANG -> "!" str-trace!,
                MOD_WHY -> "?" str-trace!
            )
        ),
        name-trace!
    )
     "{" str-trace!
    MetaVar->Int int-trace!
    "}" str-trace!)

def(value-trace!, Value -- +IO,
    match(
        VALUE_INT -> int-trace!,
        VALUE_STR -> drop "\"...\"" str-trace!,
        VALUE_BLOCK -> drop "[...]" str-trace!,
    ))

def(type-trace-prim!, PrimType -- +IO,
    match(
        PRIM_TYPE_TYPE -> "<TYPE>",
        PRIM_TYPE_STACK -> "<STACK>",
        PRIM_TYPE_EFFECT -> "<EFFECT>",
        PRIM_TYPE_UNIT -> "[]",
        PRIM_TYPE_BOOL -> "Bool",
        PRIM_TYPE_INT -> "Int",
        PRIM_TYPE_PTR -> "Ptr",
        PRIM_TYPE_STR -> "Str",
        PRIM_TYPE_CHAR -> "Char",
        PRIM_TYPE_U8 -> "U8",
        PRIM_TYPE_U16 -> "U16",
        PRIM_TYPE_U32 -> "U32",
        PRIM_TYPE_U64 -> "U64",
        PRIM_TYPE_I8 -> "I8",
        PRIM_TYPE_I16 -> "I16",
        PRIM_TYPE_I32 -> "I32",
        PRIM_TYPE_I64 -> "I64",
    ) str-trace!)

||| Replace the stack rest with a metavar, if it's unit.
def(type-semifreshen-sig, Type -- Type,
    type-sig-needs-fresh-stack-rest? if(
        type-semifreshen-sig-aux,
        id
    ))

def(type-semifreshen-sig-aux, Type -- Type,
    type-expand match(
        TMorphism ->
            meta-alloc! TMeta rotr
            dip(type-semifreshen-sig-stack) swap
            dip(type-semifreshen-sig-stack) swap
            TMorphism nip,
        _ ->
            id
    ))

def(type-semifreshen-sig-stack, Type Type -- Type Type,
    type-expand match(
        TTensor -> dip(type-semifreshen-sig-stack) TTensor,
        TPrim ->
            match(
                PRIM_TYPE_UNIT -> dup,
                _ -> TPrim
            ),
        _ -> id
    ))

||| Freshen a type signature in preparation for type sig application.
def(type-freshen-sig, Subst Type -- Subst Type,
    type-sig-needs-fresh-stack-rest? if(
        type-freshen-sig-aux,

        type-freshen
    ))

def(type-stack-rest, Type -- Type,
    type-expand match(
        TTensor -> drop type-stack-rest,
        _ -> id
    ))

def(type-sig-needs-fresh-stack-rest?, Type -- Type Bool,
    dup type-expand match(
        TMorphism ->
            type-stack-rest TYPE_UNIT == if(
                type-stack-rest TYPE_UNIT ==,
                drop false
            ),
        _ -> drop false
    ))

def(type-freshen-sig-aux, Subst Type -- Subst Type,
    type-expand match(
        TMorphism ->
            meta-alloc! TMeta rot4r
            dip(type-freshen-sig-stack) swap
            dip(type-freshen-sig-stack) swap
            TMorphism dip(nip),
        _ ->
            type-freshen
    ))

def(type-freshen-sig-stack, Type Subst Type -- Type Subst Type,
    type-expand match(
        TTensor ->
            dip(type-freshen-sig-stack) swap
            dip(type-freshen) swap
            TTensor,
        TPrim ->
            match(
                PRIM_TYPE_UNIT -> over,
                _ -> TPrim
            ),
        _ ->
            type-freshen
    ))

def(type-freshen, Subst Type -- Subst Type,
    match(
        TYPE_ERROR -> TYPE_ERROR,
        TYPE_DONT_CARE -> TYPE_DONT_CARE,
        TPrim -> TPrim,
        THole -> THole,
        TData -> TData,
        TTable -> TTable,
        TValue -> TValue, # no need to freshen values
        TVar -> type-var-freshen,
        TMeta -> meta-freshen,
        TTensor -> type-pair-freshen TTensor,
        TMorphism -> type-pair-freshen TMorphism,
        TApp -> type-pair-freshen TApp,
    ))

def(type-pair-freshen, Subst Type Type -- Subst Type Type,
    dip(type-freshen swap) type-freshen dip(swap))

def(meta-freshen, Subst MetaVar -- Subst Type,
    meta-is-defined? if(
        meta-expand type-freshen,
        drop meta-alloc! TMeta
    ))

def(type-var-freshen, Subst Var -- Subst Type,
    swap subst-has-var? if(
        tuck subst-get-var,

        over var-name?
        swap var-modality@
        meta-alloc!
        tuck meta-modality!
        tuck meta-name!
        TMeta dup
        dip(rotr subst-new!)
    ))

def(type-arity, Type -- Int,
    type-expand match(
        TData -> data-arity@,
        TApp -> drop type-arity 1-,
        _ -> drop 0,
    ))

||| Get head of type.
def(type-head, Type -- Type,
    type-expand match(
        TApp -> drop type-head,
        _ -> id
    ))

||| For types that can have a field associated with them,
||| get the number of values n, where the type's values
||| range from 0 to (n-1). This should not be too large.
|||
||| Do NOT return SOME(n) unless the type has values 0..n-1
def(type-max-count?, Type -- Type Maybe(Int),
    dup match(
        TApp -> drop type-max-count? nip,
        TTable -> table-max-count@ 1+ SOME,
        TData ->
            data-is-enum? if(
                data-tags@ len SOME,
                drop NONE
            ),
        _ -> drop NONE
    ))

##################
# Meta-var Types #
##################

def(Int->MetaVar, Int -- MetaVar, cast)
def(MetaVar->Int, MetaVar -- Int, cast)

def(meta-alloc!, MetaVar, MetaVar.alloc!)
def(meta-type!, Type MetaVar --, true over meta-is-defined! meta-type-raw!)
def(meta-expand, MetaVar -- Type,
    meta-is-defined? if(
        dup dip(meta-type-raw@ type-expand dup) meta-type-raw!,
        TMeta
    ))

def(meta-unify!, Gamma Type MetaVar -- Gamma Type,
    meta-is-defined? if(
        meta-expand type-unify!,

    dup2 TMeta == if(
        drop,

    swap
    type-has-meta? if(
        swap TMeta type-unify-failed!,

    over meta-modality@ match(
        NONE -> false,
        SOME -> over type-can-have-modality not
    ) if(
        swap TMeta type-unify-failed!,

        swap dip(dup)
        meta-type!
    )))))

########
# Data #
########

def(Data->Int, Data -- Int, cast)
def(Int->Data, Int -- Data, cast)

##############
# Type Holes #
##############

def(type-hole-unify!, Type Name -- Type,
    is-nil? if(
        drop,
        THole type-trace!
        " ~ " str-trace!
        dup type-trace!
        trace-ln!
    ))

##########
# Tables #
##########

def(Table->Int, Table -- Int, cast)
def(Int->Table, Int -- Table, cast)
def(table-alloc!, Table, Table.alloc!)

##########
# Params #
##########

def(type-max-num-params, Type -- Int,
    type-expand match(
        TMorphism -> drop type-num-morphisms-on-top,
        _ -> drop 0
    ))

def(type-num-morphisms-on-top, Type -- Int,
    type-expand match(
        TTensor ->
            type-expand match(
                TMorphism -> drop2 type-num-morphisms-on-top 1+,
                _ -> drop2 0
            ),
        _ -> drop 0
    ))

############
# APP TYPE #
############

def(app-type-trace!, Type Type --,
    app-type-trace-open! ")" str-trace!)

def(app-type-trace-open!, Type Type --,
    swap match(
        TApp ->
            app-type-trace-open!
            ", " str-trace!
            type-trace!,
        _ ->
            type-trace!
            "(" str-trace!
            type-trace!
    ))

#########
# Subst #
#########

# mirth/data/type
data Subst
    SUBST -> Map(Var, Type)
end

unSUBST : Subst -- Map(Var, Type)
unSUBST = match(SUBST -> id)

subst-nil : Subst
subst-nil = map-empty SUBST

subst-is-nil : Subst -- Bool
subst-is-nil = unSUBST map-is-empty

subst-is-nil? : Subst -- Subst Bool
subst-is-nil? = unSUBST map-is-empty? dip(SUBST)

subst-new! : Type Var Subst -- Subst
subst-new! = unSUBST rotr pack2 map-insert SUBST

subst-has-var : Var Subst -- Bool
subst-has-var = unSUBST swap map-has

subst-has-var? : Var Subst -- Var Subst Bool
subst-has-var? = dup2 subst-has-var

subst-get-var : Var Subst -- Type
subst-get-var =
    unSUBST swap map-lookup match(
        NONE -> TYPE_ERROR,
        SOME -> id
    )

subst-get-var? : Var Subst -- Var Subst Type
subst-get-var? = dup2 subst-get-var

||| If variable is in subst, unify new type with type in subst.
||| Otherwise, create larger subst with new binding.
subst-match-var : Gamma Type Var Subst -- Gamma Subst
subst-match-var =
    subst-has-var? if(
        dup dip(subst-get-var type-unify! drop),
        subst-new!
    )



#######
# TAG #
#######

Int->Tag : Int -- Tag
Int->Tag = cast

tag-num-inputs? : Tag -- Tag Int
tag-num-inputs? =
    # TODO: this should actually be calculated & stored during elaboration based on the type
    tag-has-sig? if(
        tag-sig? 0 swap
        while(token-run-end? not, token-next dip(1+)) drop,
        0
    )

tag-is-transparent? : Tag -- Tag Bool
tag-is-transparent? = tag-data? data-is-transparent? nip

########
# DATA #
########

data-num-tags : Data -- Int
data-num-tags = data-tags@ len

||| Adds constructor to data type, and gives tag its rank.
data-add-tag! : Tag Data -- +Mirth
data-add-tag! = (
    dup2 data-num-tags swap tag-value!
    data-tags? rotr dip(snoc) data-tags!
)

data-is-enum? : Data -- Data Bool
data-is-enum? = data-tags? all?(tag-num-inputs? 0 ==) nip

data-is-transparent? : Data -- Data Bool
data-is-transparent? =
    data-tags? match(
        L1 -> tag-num-inputs? 1 == nip,
        _ -> drop false
    )
