module(mirth.data.var)
import(mirth.data.name)

#######
# VAR #
#######

# mirth/data/var
table(Var)
field(var-is-implicit, Var, Bool)
field(var-name, Var, Name)
field(var-type, Var, Type)
field(var-auto-run, Var, Bool) # run variable by default

def(Var->Int, Var -- Int, cast)

def(var-new!, Name -- Var,
    Var.alloc!
    tuck var-name!)

def(var-new-implicit!, Name -- Var,
    var-new!
    true over var-is-implicit!)

def(var-is-physical?, Var -- Var Bool,
    var-type? type-expand match(
        TPrim -> match(
            PRIM_TYPE_TYPE -> false,
            PRIM_TYPE_STACK -> false,
            PRIM_TYPE_EFFECT -> false,
            _ -> drop true
        ),
        _ -> drop true
    ))

def(var-modality@, Var -- Maybe(Modality),
    var-name@ name-modality)

def(var-modality?, Var -- Var Maybe(Modality),
    var-name? name-modality)
